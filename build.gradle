plugins {
    id 'application'
    id 'io.spring.dependency-management' version '1.0.4.RELEASE'
    id 'org.springframework.boot' version '2.0.3.RELEASE'
    id 'org.owasp.dependencycheck' version '3.1.2'
    id 'com.github.ben-manes.versions' version '0.17.0'
    id 'org.sonarqube' version '2.6.2'
    id 'jacoco'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'application'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'com.github.ben-manes.versions'

group = 'uk.gov.hmcts.reform.ref.pup'
version = '0.0.1'
sourceCompatibility = 1.8
mainClassName = 'uk.gov.hmcts.reform.ref.pup.Application'

configurations {
    aatCompile.extendsFrom(testCompile)
    aatRuntime.extendsFrom(testRuntime)
}

repositories {
    maven { url "https://dl.bintray.com/hmcts/hmcts-maven" }
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
    jcenter()
    mavenLocal()
}

dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'false' ? 11 : 0
    suppressionFile = 'dependency-check-suppressions.xml'
    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
}

apply from: 'liquibase.gradle'

def versions = [
    postgresql         : '42.2.4',
    hmctsJavaLogging   : '3.0.0',
    springfoxSwagger   : '2.9.2',
    liquibase          : '3.5.3',
    lombok             : '1.18.0',
    azure              : '7.0.0',
    hmctsAuth          : '2.1.3',
    hmctsProxy         :  '2.0.0',
    h2                 : '1.4.197',
]

dependencies {

    compile("com.microsoft.azure:azure-storage:${versions.azure}")
    compile("io.springfox:springfox-swagger2:${versions.springfoxSwagger}")
    compile("io.springfox:springfox-swagger-ui:${versions.springfoxSwagger}")
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-batch')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-web')
    compile("org.liquibase:liquibase-core:${versions.liquibase}")
    compile("org.postgresql:postgresql:${versions.postgresql}")
    compile("uk.gov.hmcts.reform:java-logging-spring:${versions.hmctsJavaLogging}")
    compile("uk.gov.hmcts.reform:java-logging-httpcomponents:${versions.hmctsJavaLogging}")
    compile("uk.gov.hmcts.reform:java-logging-appinsights:${versions.hmctsJavaLogging}")
    compile("uk.gov.hmcts.reform.auth:auth-checker-lib:${versions.hmctsAuth}")
//    compile("uk.gov.hmcts.reform:http-proxy-spring-boot-autoconfigure:${versions.hmctsProxy}")
    compile("org.projectlombok:lombok:${versions.lombok}")
    runtime('org.springframework.boot:spring-boot-devtools')

    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('org.springframework.security:spring-security-test')
    testCompile("com.h2database:h2:${versions.h2}")
}

def coverageExclusionList = [
    '**uk/gov/hmcts/reform/ref/pup/Application*',
    '**uk/gov/hmcts/reform/ref/pup/exception/*',
    '**uk/gov/hmcts/reform/ref/pup/dto/*',
    '**uk/gov/hmcts/reform/ref/pup/domain/*',
    '**uk/gov/hmcts/reform/ref/pup/config/**/*',
    '**uk/gov/hmcts/reform/ref/pup/batch/exception/*',
    '**uk/gov/hmcts/reform/ref/pup/batch/config/*',
    '**uk/gov/hmcts/reform/ref/pup/batch/model/*',
    '**uk/gov/hmcts/reform/ref/pup/actuate/health/IdamHealth*',
    '**uk/gov/hmcts/reform/ref/pup/actuate/health/S2SHealth*',
]

//(jacocoTestReport | jacocoTestCoverageVerification)
jacoco {
    toolVersion = '0.7.9' // jacocoMavenPluginVersion
    reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    executionData(test)

    reports {
        xml.enabled = true
        csv.enabled = true
    }

    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it, exclude: coverageExclusionList)
        })
    }
}

//(./gradlew sonarqube)
sonarqube {
    properties {
        property "sonar.projectName", "${rootProject.name}"
        property "sonar.jacoco.reportPath", "${project.buildDir}/jacoco/test.exec"
        property "sonar.exclusions", coverageExclusionList.join(", ")
    }
}

sourceSets {
    aat {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir('src/aat/java')
        }
        resources {
            srcDir('src/aat/resources')
        }
    }
}

task functional(type: Test) {
    group = 'Delivery pipeline'
    description = 'Executes functional tests'
    setTestClassesDirs(sourceSets.aat.output.classesDirs)
    setClasspath(sourceSets.aat.runtimeClasspath)
    include "uk/gov/hmcts/reform/ref/pup/functional/**"

    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task smoke(type: Test) {
    group = 'Delivery pipeline'
    description = 'Executes non-destructive smoke tests'
    setTestClassesDirs(sourceSets.aat.output.classesDirs)
    setClasspath(sourceSets.aat.runtimeClasspath)
    include "uk/gov/hmcts/reform/ref/pup/smoke/**"

    environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

bootJar {
    baseName 'professional-user-profile'
    archiveName = "$baseName"+".jar"
    destinationDir = file("$rootDir/build/libs")
    manifest {
        attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
}

//This is used in get the version for fakeversion and buildInfo  (./gradlew -q printVersion)
task printVersion {
    description 'Prints the version of this project'
    doLast {
        print project.version
    }
}

// Run the app (./gradlew run -Ddebug=true)
run {
    def debug = System.getProperty("debug")
    if (debug == 'true') {
        jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
    }
}
